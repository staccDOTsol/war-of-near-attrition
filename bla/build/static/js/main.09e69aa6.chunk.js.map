{"version":3,"sources":["utils.ts","MintButton.tsx","App.tsx","index.tsx"],"names":["toDate","value","Date","toNumber","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","anchor","PublicKey","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","gatewayStatus","requestGatewayToken","useState","clicked","setClicked","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","onClick","a","variant","CircularProgress","require","contract","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","undefined","padding","startIcon","marginRight","endIcon","marginLeft","NFT","div","ul","WalletMultiButton","Paper","MintButtonContainer","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BOATLOAD_OF_GAS","LinearProgress","Big","times","toFixed","App","props","BN","setEnding","balance","setBalance","setIsMinting","totalSupply","setTotalSupply","setIsEnded","endDate","setEndDate","quantityString","setQuantityString","winBet","setWinbet","winner","setWinner","balancef3d","setbalancef3d","money","setWantDeposit","currentUser","setCurrentUser","nearConfig","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyStore","nearAPI","BrowserLocalStorageKeyStore","nea","walletConnectio","getAccountId","account","state","amount","currentUse","accountId","viewMethods","changeMethods","sender","requestSignIn","open","message","severity","alertState","setAlertState","mintOne","toks","near","mint","account_id","becomeWinner","tokens","startMint","msg","code","indexOf","supply","Math","floor","getCountDown","end","getWinBet","winb","getwinner","winn","balanceOf","tokenOwner","b3d","ThemeProvider","elevation","label","src","alt","date","onMount","completed","onComplete","renderer","days","hours","minutes","TextField","onChange","e","preventDefault","parseFloat","target","placeholder","Snackbar","autoHideDuration","onClose","Alert","width","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09e69aa6.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber());\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\nisMinting\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked \n            }\n            onClick={async () => {\n               \n                    console.log('Minting...');\n                    await onMint();\n            }}\n            variant=\"contained\"\n        >\n\n                    {isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"Gib Near Get f3d\"\n                    )\n           }\n        </CTAButton>\n    );\n};\n","import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport BN from 'bn.js';\nimport confetti from \"canvas-confetti\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {CTAButton, MintButton} from './MintButton';\n\nimport 'regenerator-runtime/runtime';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport { createTheme, ThemeProvider, TextField } from \"@material-ui/core\";\n\nimport \"./App.css\";\n\nimport ReactDOM from 'react-dom';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  padding: 5px 5px 5px 16px;\n  border-radius: 42px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nexport interface HomeProps {\n}\nlet contract: any\nconst App = (props: HomeProps) => {\n    const [ending, setEnding] = useState<BN>(new BN(1));\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [totalSupply, setTotalSupply] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n    const [quantityString, setQuantityString ] = useState(138);\n    const [winBet, setWinbet]  = useState(0.138);\n    const [winner, setWinner] = useState(\"h3xmaybe\");\n    const [balancef3d, setbalancef3d] = useState(0);\n    const [near, setNear ] = useState<any>()\n    const [money, setWantDeposit] = useState(1)\nconst [walletConnection, setWalletConnection] = useState<any>()\nconst [currentUser, setCurrentUser] = useState<any>()\n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = {\n    networkId: 'mainnet',\n    nodeUrl: 'https://rpc.mainnet.near.org',\n    contractName: 'f3d.near',\n    walletUrl: 'https://wallet.mainnet.near.org',\n    helperUrl: 'https://helper.mainnet.near.org'\n  }\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n\n  async function signIn() {\n\n  // Initializing connection to the NEAR testnet\n  // @ts-ignore\n  let nea = await nearAPI.connect({ keyStore, ...nearConfig })\n\n  // Initialize wallet connection\n  // @ts-ignore\n  let walletConnectio = new nearAPI.WalletConnection(nea)\n\n\n  // Load in user's account data\n  \n  console.log(walletConnectio)\n  if (walletConnectio.getAccountId()) {\n    let currentUse = ({\n      // Gets the accountId as a string\n      accountId: walletConnectio.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnectio.account().state()).amount,\n    }\n    )\n    setCurrentUser(currentUse)\n  console.log(currentUse)\n\n  // Initializing our contract APIs by contract name and configuration\n contract = (await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnectio.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['totalSupply', 'balanceOf', 'howLong', 'allowance', 'getCountDown','getwinner', 'getWinBet'],\n      changeMethods: ['init', 'transfer', 'approve', 'transferFrom', 'becomeWinner', 'withdraw', 'mint'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n  // @ts-ignore\n      sender: walletConnectio.getAccountId(),\n    }\n  ))\n  console.log(contract)\n    \n    }\n    else {\n\n  walletConnectio.requestSignIn(\n    \"f3d.near\", // contract requesting access\n    \"f3d\", // optional\n    //\"http://YOUR-URL.com/success\", // optional\n    //\"http://YOUR-URL.com/failure\" // optional\n  );\n    }\n  }\n    function change(e: any){\n      e.preventDefault() \n      setQuantityString(parseFloat(e.target.value))\n    }\n\n    function wantDeposit(e: any){\n      e.preventDefault() \n      setWantDeposit(parseFloat(e.target.value))\n    }\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n/*\n            settotalSupply(cndy.state.totalSupply);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n*/\n            var divider = 1;\n\n            // detect if using spl-token to mint\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPriceLabel(\"f3d\");\n                setPrice(0.1);\n\n\n            // end the mint when date is reached\n            if (true) {\n                setEndDate(toDate(ending));\n                if (\n                    ending.toNumber() <\n                    new Date().getTime() / 1000\n                ) {\n                    setIsEnded(true);\n                    setIsActive(false);\n                }\n            }\n        })();\n    };\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes+1) + \" minutes left to becomeWinner.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    function sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n\n    async function mintOne(toks: number) {\n        if (true) {\n            const near = toks * 0.1;\n            contract.mint(\n                {account_id:currentUser.accountId},\n                BOATLOAD_OF_GAS,\n                Big(near).times(10 ** 24).toFixed()\n            \n               )\n        }\n    }\n\n    async function deposit() {\n      if (true) {\n         await contract.becomeWinner(\n              {tokens:Big(money).times(10 ** 17).toFixed(),account_id:currentUser.accountId},\n              BOATLOAD_OF_GAS,\n              money / 2\n          \n             )\n      }\n  }\n\n    const startMint = async () => {\n        try {\n            setIsMinting(true);\n            await mintOne(quantityString);\n            \n        } catch (error: any) {\n          console.log(error)\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n    useEffect(() => {\n        (async () => {\n          console.log(currentUser)\n          if (currentUser) { \n        \n            const supply = await contract.totalSupply()\n            console.log(supply)\n            \n\n  //  contract.init( {account_id: currentUser.accountId}      )  \n            setTotalSupply(Math.floor(supply / 10 ** 17 * 1000) / 1000) \n            const end = await contract.getCountDown()\n            setEnding(end)\n            console.log(end)\n            const winb = await contract.getWinBet()\n            setWinbet(Math.floor(winb / 10 ** 17 * 1000) / 1000)\n            const winn = await contract.getwinner()\n            setWinner(winn)\n            var b3d = await contract.balanceOf({tokenOwner:\"f3d.near\"})\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            setbalancef3d(Math.floor((b3d * 0.75) / 10 ** 17 * 1000) / 1000)\n\n            var b3d = await contract.balanceOf({tokenOwner:currentUser.accountId})\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            console.log(b3d)\n            setBalance(Math.floor(b3d / 10 ** 17 * 1000) / 1000)\n    \n            setEndDate(toDate(new BN(end / 1000 )));\n          }\n        })();\n    }, [currentUser]);\n\n\n\n    return (\n      <ThemeProvider theme={theme}>\n        <main>\n              \n\n            <MainContainer>\n                \n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>A Totally Fair Game</h2>\n                            <h3>wen timer runs out, the last person to becomeWinner gets 3/4 of pot &lt;3</h3>\n                            <h3>pot: f3d tokens and NEAR on the contract. Nice!</h3>\n                            <h4>yet, whenever someone becomesWinner the timer resets to now+seven days :)</h4>\n                            <h4>btw? hodling? supply burned 2% on mint n transfer :)</h4>\n                            \n                            <br/>\n                            <div><Price\n                                label={\"0.1 NEAR per f3d - btw the cats pointless\"}/>\n                                <Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                        {endDate  &&\n                        // @ts-ignore\n                              <Countdown\n                                date={endDate}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              />}\n                              <h3>TOTAL SUPPLY : {totalSupply}</h3>\n\n                            <br/>\n                            \n                            <MintButtonContainer>\n                                { currentUser ? (\n<div>\n                            How many buy? <br />\n{\n  // @ts-ignore\n                            <TextField onChange={change} placeholder={\"138\"}></TextField>\n}\n                            <br />\n                                                { \n                                                // @ts-ignore\n                                                < MintButton\n                                                    isMinting={isMinting}\n\n                                                    onMint={startMint}\n                                                />\n}\n                                                </div>\n                                 ): (\n<CTAButton onClick={signIn}>\n  Login yo\n</CTAButton>\n) }\n                            </MintButtonContainer>\n          \n          <br />\n          <MintButtonContainer> { currentUser && \n          <div>\n                      <br />\n\n            {winner} winning :) <br /><br />\n            Your bags: {balance} <br />\n            Pot: {balancef3d} <br /><br />\n                            How many deposit?\n                            <br />\n                            <TextField onChange={wantDeposit} placeholder={\"138\"}></TextField>\n                                  <CTAButton onClick={deposit}>\n  Become winner @ &gt; {winBet} ?\n  \n</CTAButton> </div>\n}\n\n</MintButtonContainer>\n          \n                                  \n                                  <br/>\n\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n            <MainContainer>\n\n            <MintContainer>\n\n                    <DesContainer>     \n                <NFT >{\"Psst... rightclick save I'm tired of fucking with CSS\"}</NFT>\n\n                    </DesContainer>\n                </MintContainer>\n              </MainContainer>\n<MainContainer>\n            <MintContainer>\n                    <DesContainer >\n                <NFT style={{width:\"80%\"}}>\n            <img src=\"/1.png\" width={\"77%\"} ></img>\n            </NFT>\n\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n\n            <MainContainer>\n\n            <MintContainer>\n\n                    <DesContainer>     \n                <NFT style={{width:\"80%\"}}>\n            <img src=\"/2.png\" width={\"77%\"} height={\"90%\"}></img>\n            </NFT>\n\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n        </main>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n\n    ReactDOM.render(\n      <App\n      />,\n      document.getElementById('root')\n    );\n  \n"],"sourceRoot":""}